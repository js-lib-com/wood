package js.wood.eval;

import java.util.ArrayList;
import java.util.List;

/**
 * Expression arguments builder. This builder operates on an arguments stream generated by {@link Parser}, char by char.
 * It detect white spaces separating arguments and update internal arguments list, see {@link #arguments}. After parser
 * finish its arguments characters need to call {@link #flush()} in order to process the last argument.
 * <p>
 * Supports also nested expressions for which it provides {@link #addExpression(Expression)} appender. Finally, note
 * that arguments builder instance is not designed to be reused; create a new instance for every arguments build
 * session.
 * 
 * @author Iulian Rotaru
 * @since 1.1
 */
class ArgumentsBuilder
{
  /**
   * Current argument builder. Arguments builder operates on a stream of arguments generated by parser; this current
   * argument builder is used for current, in process argument.
   */
  private StringBuilder builder = new StringBuilder();

  /** Expression arguments list contains both values and nested expressions. */
  private List<Object> arguments = new ArrayList<Object>();

  /**
   * Append character to current argument builder. If character to add is white space consider current argument complete
   * and add it to arguments list, see {@link #arguments}. Also on white space prepare current argument builder for next
   * argument, see {@link #builder}.
   * 
   * @param c character from parsed expression stream.
   */
  public void addChar(char c)
  {
    if(!Character.isWhitespace(c)) {
      builder.append(c);
      return;
    }

    // here we have white space that signal current argument end
    // as a consequence need to add current argument to internal arguments list and reset current argument builder
    // anyway, do not perform these steps if builder is empty - meaning that there are multiple white spaces
    if(builder.length() > 0) {
      arguments.add(builder.toString());
      builder = new StringBuilder();
    }
  }

  /**
   * Add nested expression to internal arguments list.
   * 
   * @param expression nested expression.
   */
  public void addExpression(Expression expression)
  {
    arguments.add(expression);
  }

  /**
   * Force closing current argument build and adding it to internal arguments list. This method should be called after
   * arguments stream end in order to ensure last argument processing.
   */
  public void flush()
  {
    if(builder.length() > 0) {
      arguments.add(builder.toString());
    }
    builder = null;
  }

  /**
   * Get arguments value. Returned arguments array contains both values and nested expressions.
   * 
   * @return arguments value.
   * @see #arguments
   */
  public Object[] getValue()
  {
    return arguments.toArray();
  }
}