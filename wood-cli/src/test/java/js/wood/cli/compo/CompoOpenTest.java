package js.wood.cli.compo;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.not;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Path;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import js.dom.Document;
import js.dom.DocumentBuilder;
import js.util.Classes;
import js.wood.cli.Config;
import js.wood.cli.Console;
import js.wood.cli.ExitCode;
import js.wood.cli.FilesUtil;
import picocli.CommandLine;
import picocli.CommandLine.Model.CommandSpec;
import picocli.CommandLine.ParameterException;

@RunWith(MockitoJUnitRunner.class)
public class CompoOpenTest {
	@Mock
	private CommandSpec commandSpec;
	@Mock
	private Config config;

	@Mock
	private Console console;
	@Mock
	private FilesUtil files;
	@Mock
	private Path projectDir;
	@Mock
	private Path compoDir;
	@Mock
	private Path descriptorFile;
	@Mock
	private CompoName compoName;
	@Mock
	private DocumentBuilder documentBuilder;
	@Mock
	private Desktop desktop;

	private CompoOpen task;

	@Before
	public void beforeTest() throws IOException {
		when(commandSpec.commandLine()).thenReturn(mock(CommandLine.class));
		when(config.get("runtime.port", int.class)).thenReturn(8080);
		when(config.get("runtime.context", (String)null)).thenReturn("app");

		when(files.getProjectDir()).thenReturn(projectDir);
		when(projectDir.resolve(anyString())).thenReturn(compoDir);
		when(compoDir.resolve("about.xml")).thenReturn(descriptorFile);

		when(files.getFileName(compoDir)).thenReturn("about");
		when(files.exists(compoDir)).thenReturn(true);
		when(files.exists(descriptorFile)).thenReturn(true);

		when(documentBuilder.loadXML((File) null)).thenReturn(parseXML("<page></page>"));

		when(compoName.isValid()).thenReturn(true);
		when(compoName.path()).thenReturn("res/page/about");

		task = new CompoOpen();
		task.setCommandSpec(commandSpec);
		task.setConfig(config);
		task.setConsole(console);
		task.setFiles(files);
		task.setName(compoName);
		task.setDocumentBuilder(documentBuilder);
		task.setDesktop(desktop);
	}

	private static Document parseXML(String document) {
		DocumentBuilder builder = Classes.loadService(DocumentBuilder.class);
		return builder.parseXML(document);
	}

	@Test
	public void GivenDefaultOptions_ThenOpenPage() throws IOException, URISyntaxException {
		// given
		
		// when
		ExitCode exitCode = task.exec();

		// then
		assertThat(exitCode, equalTo(ExitCode.SUCCESS));
		
		ArgumentCaptor<URI> uriArgument = ArgumentCaptor.forClass(URI.class);
		verify(desktop, times(1)).browse(uriArgument.capture());
		assertThat(uriArgument.getValue().toString(), not(containsString("preview")));
	}

	@Test
	public void GivenDefaultOptionsAndForcePreview_ThenPreviewPage() throws IOException, URISyntaxException {
		// given
		task.setPreview(true);
		
		// when
		ExitCode exitCode = task.exec();

		// then
		assertThat(exitCode, equalTo(ExitCode.SUCCESS));
		
		ArgumentCaptor<URI> uriArgument = ArgumentCaptor.forClass(URI.class);
		verify(desktop, times(1)).browse(uriArgument.capture());
		assertThat(uriArgument.getValue().toString(), containsString("preview"));
	}

	@Test
	public void GivenDescriptorIsComponent_ThenPreviewCompo() throws IOException, URISyntaxException {
		// given
		when(documentBuilder.loadXML((File) null)).thenReturn(parseXML("<component></component>"));

		// when
		ExitCode exitCode = task.exec();

		// then
		assertThat(exitCode, equalTo(ExitCode.SUCCESS));
		
		ArgumentCaptor<URI> uriArgument = ArgumentCaptor.forClass(URI.class);
		verify(desktop, times(1)).browse(uriArgument.capture());
		assertThat(uriArgument.getValue().toString(), containsString("preview"));
	}

	@Test(expected = ParameterException.class)
	public void GivenInvalidCompoName_ThenParameterException() throws IOException, URISyntaxException {
		// given
		when(compoName.isValid()).thenReturn(false);

		// when
		task.exec();

		// then
	}

	@Test
	public void GivenMissingCompoDir_ThenAbort() throws IOException, URISyntaxException {
		// given
		when(files.exists(compoDir)).thenReturn(false);

		// when
		ExitCode exitCode = task.exec();

		// then
		assertThat(exitCode, equalTo(ExitCode.ABORT));
		verify(files, times(0)).cleanDirectory(compoDir, false);
		verify(console, times(1)).print("Command abort.");
	}

	@Test
	public void GivenMissingCompoDescriptor_ThenAbort() throws IOException, URISyntaxException {
		// given
		when(files.exists(descriptorFile)).thenReturn(false);

		// when
		ExitCode exitCode = task.exec();

		// then
		assertThat(exitCode, equalTo(ExitCode.ABORT));
		verify(files, times(0)).cleanDirectory(compoDir, false);
		verify(console, times(1)).print("Command abort.");
	}
}
